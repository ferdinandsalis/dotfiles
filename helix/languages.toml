# Language Servers

## eslint

[language-server.eslint]
args = ["--stdio"] # should come by def with helix
command = "vscode-eslint-language-server"

[language-server.eslint.config]
validate = "on" # I assume this enabled eslit to validate the file, which now shows me counts for errors, warnings, etc in helix
experimental = { useFlatConfig = false } # not sure why this is here
rulesCustomizations = []
run = "onType"
problems = { shortenToSingleLine = false }
nodePath = "" # seems redundant, why do we need to override this, should get detected autom.

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.codeAction.showDocumentation]
enable = true

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "fixAll"

[language-server.eslint.config.workingDirectory]
mode = "location" # do we need to override this?

## TypeScript/JavaScript Language Server
[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]
config = { hostInfo = "helix", typescript = { inlayHints = { includeInlayParameterNameHints = "all", includeInlayParameterNameHintsWhenArgumentMatchesName = false, includeInlayFunctionParameterTypeHints = true, includeInlayVariableTypeHints = false, includeInlayPropertyDeclarationTypeHints = true, includeInlayFunctionLikeReturnTypeHints = true, includeInlayEnumMemberValueHints = true } } }

## CSS Language Server  
[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

## Tailwind CSS Language Server
[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]
config = { tailwindCSS = { experimental = { classRegex = [["clsx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"], ["cn\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]] }, validate = true, lint = { cssConflict = "warning", invalidApply = "error", invalidScreen = "error", invalidVariant = "error", invalidConfigPath = "error", invalidTailwindDirective = "error", recommendedVariantOrder = "warning" } } }

# Languages

## Web

[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }
language-servers = ["vscode-html-language-server", "tailwindcss-ls"]
auto-format = true

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }
auto-format = true

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }
language-servers = ["vscode-css-language-server", "tailwindcss-ls"]
auto-format = true

### JavaScript

[[language]]
name = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
language-servers = ["typescript-language-server", "eslint", "tailwindcss-ls"]
auto-format = true

[[language]]
name = "jsx"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
language-servers = ["typescript-language-server", "eslint", "tailwindcss-ls"]
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
language-servers = ["typescript-language-server", "eslint", "tailwindcss-ls"]
auto-format = true

[[language]]
name = "tsx"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
language-servers = ["typescript-language-server", "eslint", "tailwindcss-ls"]
auto-format = true

## Elixir

[language-server.elixir-ls]
command = "elixir-ls"
config = { elixirLS = { dialyzerEnabled = true, fetchDeps = false } }

[[language]]
name = "elixir"
scope = "source.elixir"
file-types = ["ex", "exs"]
roots = ["mix.exs", "mix.lock"]
formatter = { command = "mix", args = ["format", "-"] }
auto-format = true
language-servers = ["elixir-ls"]

[[language]]
name = "heex"
scope = "source.heex"
file-types = ["heex"]
roots = ["mix.exs", "mix.lock"]
formatter = { command = "mix", args = ["format", "-"] }
auto-format = true
language-servers = ["elixir-ls"]
